---

- name: Verify variables defined and not empty
  ansible.builtin.assert:
    fail_msg: "{{ item }} is empty or not defined for {{ inventory_hostname }}"
    that:
      # Defined and (if a string, not an emtpy string)
      - lookup('ansible.builtin.vars', item, default='NOTDEFINED') != 'NOTDEFINED'
      - lookup('ansible.builtin.vars', item) is not string or lookup('ansible.builtin.vars', item)
  loop:
    - node_group
    - node_net

- name: Verify /26 or larger network
  ansible.builtin.assert:
    fail_msg: "node_net must be a /26 net or larger (larger being a smaller CIDR)"
    that:
      - node_net | ansible.utils.ipaddr('prefix') <= 26

- name: node_group must match the group its in
  ansible.builtin.assert:
    fail_msg: "Group {{ node_group }} does not exist"
    that:
      - groups[node_group].index(inventory_hostname) >= 0

- name: Add leader group name
  ansible.builtin.set_fact:
    node_leader_group_name: "leader_{{ node_group }}"

- name: Add leaders to named leader group
  when: node_leader
  ansible.builtin.group_by:
    key: "{{ node_leader_group_name }}"

- name: Ensure only one leader per group
  when: node_leader
  ansible.builtin.assert:
    fail_msg: "{{ node_leader_group_name }} length {{ groups.get(node_leader_group_name, []) | length }} != 1"
    that:
      - groups[node_leader_group_name] | length == 1

- name: Set node net facts
  ansible.builtin.set_fact:
    # Every host gets an incrementing IP
    node_bridge_ip: "{{ node_net | ansible.utils.nthhost(5 + groups[node_group].index(inventory_hostname)) }}"
    node_net_cidr: "{{ node_net | ansible.utils.ipaddr('prefix') }}"
    node_leader_ip: "{{ hostvars[groups[node_leader_group_name][0]].ansible_default_ipv4.address }}"
    node_leader_host: "{{ groups[node_leader_group_name][0] }}"

- name: Set DHCP settings for leader
  when: node_leader
  ansible.builtin.set_fact:
    node_dhcp_start: "{{ groups[node_group] | map('extract', hostvars, 'node_bridge_ip') | ansible.utils.ipaddr('int') | max | ansible.utils.ipmath(5) }}"
    node_dhcp_end: "{{ node_net | ansible.utils.ipaddr('last_usable') | ansible.utils.ipmath(-5) }}"

- name: Print bridge IP for node
  when: ansible_check_mode
  ansible.builtin.debug:
    msg: "{{item}}: {{ lookup('ansible.builtin.vars', item, default=' ') }}"
  loop:
    - node_bridge_ip
    - node_leader_ip
    - node_leader_host
    - node_dhcp_start
    - node_dhcp_end

# TODO: Apache 2.0 license
# From: https://opendev.org/zuul/zuul-jobs/src/commit/f2208ed3c350cbe2ea87a8be932cb36d23f8544b/roles/multi-node-bridge/tasks/common.yaml
- name: Find bridge MTU
  when: bridge_mtu is not defined
  block:
    - name: Determine bridge mtu
      # Find all interfaces with a permanent mac address type.
      # Permanent mac addrs imply "real" hardware and not interfaces we have
      # created through this system. This makes our MTU determination mostly
      # idempotent allowing us to create multiple overlays without
      # perpetually smaller MTUs.
      # find is used instead of ls as we can select the 'link' type with find
      # only the link type is needed because files do not have interface
      # properties and directories are not used for this area of /sys
      ansible.builtin.shell: |
        SMALLEST_MTU=""
        for X in $(find /sys/class/net/ -maxdepth 1 -type l -exec basename {} ';') ; do
            MAC_TYPE=$(cat "/sys/class/net/${X}/addr_assign_type")
            if [ "$MAC_TYPE" -ne "0" ] ; then
                # Type 0 is a permanent address implying a "real"
                # interface. We ignore other interfaces as that is what we
                # create here
                continue
            fi
            MTU=$(cat "/sys/class/net/${X}/mtu")
            if [ -z "$SMALLEST_MTU" ] || [ "$SMALLEST_MTU" -gt "$MTU" ] ; then
                SMALLEST_MTU=$MTU
            fi
        done
        # 70 byte overhead for vxlan + IPv6, which will also support IPv4
        echo $(( SMALLEST_MTU - 70 ))
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.PATH }}:/bin:/sbin:/usr/sbin"
      register: mtu_output
    - name: Set bridge_mtu
      ansible.builtin.set_fact:
        node_bridge_mtu: "{{ mtu_output.stdout }}"
