# vm
#   - name: Unique name of the VM
#   - src: Source of the image (must be qcow2)
#   - mem: Amount of memory in MiB or node_qemu_default_memory
#   - cpu: Number of CPUs or node_qemu_default_cpu
#   - arch: Defaults to host
#   - os: Defaults to node_qemu_default_os (virt-install --osinfo list)
#   - os_variant: Defaults to node_qemu_default_os_variant
#   - network: Define a network or fallback to node_qemu_default_network or false for no network


- name: "Create VM dir: {{ vm.name }}"
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ node_qemu_vm_dir }}/{{ vm.name }}"
    owner: "{{ ansible_user }}"
    group: "{{ node_qemu_dir_group }}"
    mode: "u=rwX,g=rwX,o="
  register: node_qemu_vm_local_dir

- name: "Checksum existing disk image: {{ vm.name }}"
  become: true
  when: "not node_qemu_vm_local_dir.changed"
  ansible.builtin.stat:
    path: "{{ node_qemu_vm_dir }}/{{ vm.name }}/{{ vm.name }}.qcow2"
    get_checksum: true
    checksum_algorithm: sha1
  register: node_qemu_target_qcow

- name: "Check if vm exists: {{ vm.name }}"
  when: "node_qemu_target_qcow.stat.exists | default(false) | bool"
  become: true
  ansible.builtin.shell: |
    virsh list --all --name \
      | grep --no-messages --silent --line-regexp --fixed-strings '{{ vm.name }}'
  ignore_errors: true
  register: node_qemu_vm_exists

- name: "Checksum local disk image: {{ vm.name }} = {{ vm.src }}"
  when: "node_qemu_target_qcow.stat.exists | default(false) | bool"
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ vm.src }}"
    get_checksum: true
    checksum_algorithm: sha1
  register: node_qemu_local_qcow

- name: "Delete existing VM: {{ vm.name }}"
  when: >-
    ((node_qemu_vm_exists.rc | default(1)) == 0) and
    (
    (node_qemu_target_qcow.stat.checksum | default('a'))
    != (node_qemu_local_qcow.stat.checksum | default('b'))
    )
  become: true
  ansible.builtin.shell: |
    virsh destroy '{{ vm.name }}'
    virsh undefine '{{ vm.name }}' --remove-all-storage
  register: node_qemu_rm_vm

- name: "Upload VM image: {{ vm.name }} = {{ vm.src }}"
  become: true
  when: >-
    (
    (node_qemu_target_qcow.stat.checksum | default('a'))
    != (node_qemu_local_qcow.stat.checksum | default('b'))
    )
  ansible.builtin.copy:
    src: "{{ vm.src }}"
    dest: "{{ node_qemu_vm_dir }}/{{ vm.name }}/{{ vm.name }}.qcow2"
    owner: "{{ ansible_user }}"
    group: "{{ node_qemu_dir_group }}"
    mode: "u=rwX,g=rwX,o="
    backup: false
  register: node_qemu_upload_qcow

- name: "Create VM: {{ vm.name }}"
  become: true
  when: >-
    (node_qemu_upload_qcow.changed | default(false)) or
    (node_qemu_rm_vm.rc is defined) or
    ((node_qemu_vm_exists.rc | default(1)) != 0)
  ansible.builtin.shell: >
    virt-install
    --noautoconsole
    --name '{{ vm.name }}'
    --memory '{{ vm.mem | default(node_qemu_default_memory) }}'
    --vcpus  '{{ vm.cpu | default(node_qemu_default_cpu) }}'
    --disk '{{ node_qemu_vm_dir }}/{{ vm.name }}/{{ vm.name }}.qcow2,device=disk,bus=virtio'
    --osinfo '{{ vm.os | default(node_qemu_default_os) }}'
    {{ ("--arch '" ~ vm.arch ~ "'") if (vm.arch | default('')) }}
    --virt-type kvm
    --graphics none
    {{ ("--network '" ~ (vm.bridge | default(node_qemu_default_network) | items | map('join', '=') | join(',')) ~ "'") if vm.bridge | default(true) }}
    --import
    --transient
