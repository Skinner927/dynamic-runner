# vm
#   - name: Unique name of the VM
#   - src: Source of the image (must be qcow2)
#   - mem: Amount of memory in MiB or node_qemu_default_memory
#   - cpu: Number of CPUs or node_qemu_default_cpu
#   - arch: Defaults to host
#   - os: Defaults to node_qemu_default_os
#   - os_variant: Defaults to node_qemu_default_os_variant
#   - bridge: Network bridge name defaults to literal "default"


# TODO: This should just be the ansible user's name
- name: "Create VM dir: {{ vm.name }}"
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ node_qemu_vm_dir }}/{{ vm.name }}"
    owner: "{{ node_qemu_user }}"
    group: "{{ node_qemu_group }}"
    mode: "u=rw,g=rw,o=r"
  register: vm_dir

- name: "Check if vm exists: {{ vm.name }}"
  when: "not vm_dir.changed"
  become: true
  ansible.builtin.shell: |
    set -eo pipefail
    virsh list --all --name | grep -sq '^{{ vm.name }}$'
  register: vm_exists

- name: "Checksum existing disk image: {{ vm.name }}"
  when: "(vm_exists.rc | default(1)) == 0"
  become: true
  ansible.builtin.stat:
    path: "{{ node_qemu_vm_dir }}/{{ vm.name }}/{{ vm.name }}.qcow2"
    get_checksum: true
    checksum_algorithm: sha1
  register: target_qcow

- name: "Checksum local disk image: {{ vm.name }} = {{ vm.src }}"
  when: "(vm_exists.rc | default(1)) == 0"
  local_action:
    ansible.builtin.stat:
      path: "{{ vm.src }}"
      get_checksum: true
      checksum_algorithm: sha1
  register: local_qcow

- name: "Delete existing VM: {{ vm.name }}"
  when: >-
    ((target_qcow.stat.checksum | default('a'))
      != (local_qcow.stat.checksum | default('b')))
  become: true
  ansible.builtin.shell: |
    virsh destroy '{{ vm.name }}'

- name: "Upload VM image: {{ vm.name }} = {{ vm.src }}"
  when: >-
    ((target_qcow.stat.checksum | default('a'))
      != (local_qcow.stat.checksum | default('b')))
  become: true
  ansible.builtin.copy:
    src: "{{ vm.src }}"
    dest: "{{ node_qemu_vm_dir }}/{{ vm.name }}/{{ vm.name }}.qcow2"
    owner: "{{ node_qemu_user }}"
    group: "{{ node_qemu_group }}"
    mode: "u=rw,g=rw,o=r"
  register: upload_qcow

- name: "Create VM: {{ vm.name }}"
  when: upload_qcow.changed
  ansible.builtin.shell: |
    set -eo pipefail
    virt-install
      --noautoconsole
      --name {{ vm.name }}
      --memory {{ vm.mem | default(node_qemu_default_memory) }}
      --vcpus  {{ vm.cpu | default(node_qemu_default_cpu) }}
      --disk /virt/vms/{{ vm.name }}/{{ vm.name }}.qcow2,device=disk,bus=virtio
      --disk /virt/vms/{{ vm.name }}/cloud-config.img,device=cdrom
      --os-type {{ vm.os | default(node_qemu_default_os) }}
      --os-variant {{ vm.os_variant | default(node_qemu_default_os_variant) }}
      {{ ('--arch ' ~ vm.arch) if vm.arch else '' }}
      --virt-type kvm
      --graphics none
      --network bridge={{ vm.bridge | default('default') }},model=virtio
      --import
